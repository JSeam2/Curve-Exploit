// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/// @title            Decompiled Contract
/// @author           Jonathan Becker <jonathan@jbecker.dev>
/// @custom:version   heimdall-rs v0.6.0
///
/// @notice           This contract was decompiled using the heimdall-rs decompiler.
///                     It was generated directly by tracing the EVM opcodes from this contract.
///                     As a result, it may not compile or even be valid solidity code.
///                     Despite this, it should be obvious what each function does. Overall
///                     logic should have been preserved throughout decompiling.
///
/// @custom:github    You can find the open-source decompiler here:
///                       https://heimdall.rs

contract DecompiledContract {
    
    bytes32 public stor_a;
    bytes32 public stor_b;
    bytes32 public stor_c;
    
    event Event_8be0079c();
    event Event_9207361c();
    
    /// @custom:selector    0xf2fde38b
    /// @custom:name        Unresolved_f2fde38b
    /// @param              arg0 ["address", "bytes", "bytes20", "bytes32", "int", "int160", "int256", "string", "uint", "uint160", "uint256"]
    function Unresolved_f2fde38b(address arg0) public {
        require(arg0 == (address(arg0)));
        require(msg.sender == (address(stor_a)), "Ownable: new owner is the zero address");
        require(address(arg0), "Ownable: new owner is the zero address");
        emit Event_8be0079c(address(stor_a), address(arg0));
        stor_a = (address(arg0)) | (uint96(stor_a));
    }
    
    /// @custom:selector    0xbe9a6555
    /// @custom:name        Unresolved_be9a6555
    function Unresolved_be9a6555() public returns (uint256) {
        require(msg.sender == (address(stor_a)));
        var_b = 0x40 + var_b;
        var_c = msg.data[4:36];
        require(var_b.length);
        var_b = 0x40 + var_b;
        var_h = msg.data[4:36];
        var_b = var_b + 0x20;
        require(address(stor_c).code.length);
        (bool success, bytes memory ret0) = address(stor_c).call{ value: 0 }(abi.encode(0x5c38449e00000000000000000000000000000000000000000000000000000000));
        return 0;
        if (!0x02 < var_b.length) {
        }
        if (!0x02 < var_b.length) {
        }
    }
    
    /// @custom:selector    0xf04f2707
    /// @custom:name        Unresolved_f04f2707
    /// @param              arg0 ["bytes", "uint256", "int256", "string", "bytes32", "uint", "int"]
    /// @param              arg1 ["address", "bytes", "bytes20", "bytes32", "int", "int160", "int256", "string", "uint", "uint160", "uint256"]
    /// @param              arg2 ["bytes", "uint256", "int256", "string", "bytes32", "uint", "int"]
    function Unresolved_f04f2707(bytes memory arg0, address arg1, bytes memory arg2) public pure {
        require(!arg0 > 0xffffffffffffffff);
        require(!(arg0) > 0xffffffffffffffff);
        require(!((var_c + (uint248((0x20 + (arg0 << 0x05)) + 0x1f))) < var_c) | ((var_c + (uint248((0x20 + (arg0 << 0x05)) + 0x1f))) > 0xffffffffffffffff));
        bytes memory var_c = var_c + (uint248((0x20 + (arg0 << 0x05)) + 0x1f));
        require(!(0x20 + (0x04 + arg0)) < (0x20 + ((0x04 + arg0) + (arg0 << 0x05))));
        require((0x20 + (arg0)) == (address(0x20 + (arg0))));
        if (!(0x20 + (0x20 + (0x04 + arg0))) < (0x20 + ((0x04 + arg0) + (arg0 << 0x05)))) {
        }
        require(!arg1 > 0xffffffffffffffff);
        if (!(arg1) > 0xffffffffffffffff) {
            require(!(arg1) > 0xffffffffffffffff);
            var_c = var_c + (uint248((0x20 + (arg1 << 0x05)) + 0x1f));
            require(!((var_c + (uint248((0x20 + (arg1 << 0x05)) + 0x1f))) < var_c) | ((var_c + (uint248((0x20 + (arg1 << 0x05)) + 0x1f))) > 0xffffffffffffffff));
            require(!((0x04 + arg1) + 0x20) < (0x20 + ((0x04 + arg1) + (arg1 << 0x05))));
        }
        require(!arg2 > 0xffffffffffffffff);
    }
    
    /// @custom:selector    0x715018a6
    /// @custom:name        Unresolved_715018a6
    function Unresolved_715018a6() public {
        require(msg.sender == (address(stor_a)), "Ownable: caller is not the owner");
        emit Event_8be0079c(address(stor_a), 0);
        uint96 stor_a = stor_a;
    }
    
    /// @custom:selector    0x51cff8d9
    /// @custom:name        Unresolved_51cff8d9
    /// @param              arg0 ["address", "bytes", "bytes20", "bytes32", "int", "int160", "int256", "string", "uint", "uint160", "uint256"]
    function Unresolved_51cff8d9(address arg0) public {
        require(arg0 == (address(arg0)));
        require(msg.sender == (address(stor_a)));
        var_a = 0x70a0823100000000000000000000000000000000000000000000000000000000;
        (bool success, bytes memory ret0) = address(arg0).staticcall(abi.encode(0x70a0823100000000000000000000000000000000000000000000000000000000));
        var_c = var_c + (uint248(ret0.length + 0x1f));
        require(!(((var_c + ret0.length) - var_c) < 0x20), "Address: insufficient balance for call");
        var_c = var_c + 0x64;
        var_c = 0x40 + var_c;
        require(!(address(this).balance < 0), "Address: insufficient balance for call");
        require(address(arg0).code.length, "Address: call to non-contract");
        (bool success, bytes memory ret0) = address(arg0).call{ value: 0 }(abi.encode(0x08c379a000000000000000000000000000000000000000000000000000000000));
        require(ret0.length == 0);
        require(!var_p);
        require(!var_p, "SafeERC20: ERC20 operation did not succeed");
        require(!(((0x80 + var_p) - 0x80) < 0x20), "SafeERC20: ERC20 operation did not succeed");
        require(var_a == var_a, "SafeERC20: ERC20 operation did not succeed");
        require(var_a, "SafeERC20: ERC20 operation did not succeed");
        emit Event_9207361c(msg.sender, address(arg0), var_c.length);
        var_c = var_c + (uint248(ret0.length + 0x3f));
        require(!var_c.length);
        if (!var_c.length) {
            if (!(((0x20 + var_c) + var_c.length) - (0x20 + var_c)) < 0x20) {
            }
        }
    }
    
    /// @custom:selector    0x75aa3cd1
    /// @custom:name        Unresolved_75aa3cd1
    /// @param              arg0 ["address", "bytes", "bytes20", "bytes32", "int", "int160", "int256", "string", "uint", "uint160", "uint256"]
    function Unresolved_75aa3cd1(address arg0) public {
        require(arg0 == (address(arg0)));
        require(msg.sender == (address(stor_a)));
        require(address(arg0).code.length);
        (bool success, bytes memory ret0) = address(arg0).call{ value: address(this).balance }(abi.encode(0xd0e30db000000000000000000000000000000000000000000000000000000000));
    }
    
    /// @custom:selector    0x8da5cb5b
    /// @custom:name        Unresolved_8da5cb5b
    function Unresolved_8da5cb5b() public view returns (uint256) {
        return address(stor_a);
    }
}