# Palkeoramix decompiler.
# Backup code
# 0x6080604052600436106100745760003560e01c80638da5cb5b1161004e5780638da5cb5b1461010f578063be9a65551461013c578063f04f27071461015f578063f2fde38b1461017f57600080fd5b806351cff8d9146100ba578063715018a6146100da57806375aa3cd1146100ef57600080fd5b366100b5576004546001600160a01b031633036100b3576001546000036100b35761009d61019f565b600180549060006100ad83611063565b91905055505b005b600080fd5b3480156100c657600080fd5b506100b36100d5366004611098565b61023a565b3480156100e657600080fd5b506100b3610332565b3480156100fb57600080fd5b506100b361010a366004611098565b6103a6565b34801561011b57600080fd5b506000546040516001600160a01b0390911681526020015b60405180910390f35b34801561014857600080fd5b5061015161042d565b604051908152602001610133565b34801561016b57600080fd5b506100b361017a3660046111f9565b610582565b34801561018b57600080fd5b506100b361019a366004611098565b610a63565b60048054604080518082018252690878678326eac90000008082526000602083018190529251630b4c7e4d60e01b815292946001600160a01b0390941693630b4c7e4d9391926101f3929091879101611325565b60206040518083038185885af1158015610211573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906102369190611340565b5050565b6000546001600160a01b0316331461026d5760405162461bcd60e51b815260040161026490611359565b60405180910390fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156102b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d89190611340565b90506102ee6001600160a01b0383163383610b4d565b6040518181526001600160a01b0383169033907f9207361cc2a04b9c7a06691df1eb87c6a63957ae88bf01d0d18c81e3d12720999060200160405180910390a35050565b6000546001600160a01b0316331461035c5760405162461bcd60e51b815260040161026490611359565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146103d05760405162461bcd60e51b815260040161026490611359565b6000819050806001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b15801561041057600080fd5b505af1158015610424573d6000803e3d6000fd5b50505050505050565b600080546001600160a01b031633146104585760405162461bcd60e51b815260040161026490611359565b60408051600180825281830190925260009160208083019080368337505060025482519293506001600160a01b03169183915060009061049a5761049a61138e565b6001600160a01b0392909216602092830291909101909101526040805160018082528183019092526000918160200160208202803683370190505090506910f0cf064dd592000000816000815181106104f5576104f561138e565b602090810291909101810191909152604080519182018152600082526005549051632e1c224f60e11b81526001600160a01b0390911690635c38449e906105469030908790879087906004016113f4565b600060405180830381600087803b15801561056057600080fd5b505af1158015610574573d6000803e3d6000fd5b505050506000935050505090565b600254604051632e1a7d4d60e01b81526910f0cf064dd59200000060048201526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b1580156105d157600080fd5b505af11580156105e5573d6000803e3d6000fd5b505050506105f1610ba4565b6105f9610d17565b600354600480546040516370a0823160e01b815230928101929092526001600160a01b039283169263095ea7b39291169083906370a0823190602401602060405180830381865afa158015610652573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106769190611340565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156106c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e59190611490565b50600480546003546040516370a0823160e01b815230938101939093526001600160a01b0391821692633df02124926001926000929116906370a0823190602401602060405180830381865afa158015610743573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107679190611340565b6003546040516370a0823160e01b8152306004820152683635c9adc5dea00000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156107b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107dc9190611340565b6107e691906114b2565b6040516001600160e01b031960e087901b168152600f94850b60048201529290930b602483015260448201526064810191909152608401600060405180830381600087803b15801561083757600080fd5b505af115801561084b573d6000803e3d6000fd5b50506002546001600160a01b0316915063d0e30db09050610874670de0b6b3a7640000476114b2565b6040518263ffffffff1660e01b81526004016000604051808303818588803b15801561089f57600080fd5b505af11580156108b3573d6000803e3d6000fd5b505060025460055487516001600160a01b03928316955063a9059cbb94509116915086906000906108e6576108e661138e565b60200260200101516040518363ffffffff1660e01b815260040161091f9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af115801561093e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109629190611490565b506002546040516370a0823160e01b81523060048201526001600160a01b039091169063a9059cbb90739420f8821ab4609ad9fa514f8d2f5344c3c0a6ab9083906370a0823190602401602060405180830381865afa1580156109c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ed9190611340565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610a38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5c9190611490565b5050505050565b6000546001600160a01b03163314610a8d5760405162461bcd60e51b815260040161026490611359565b6001600160a01b038116610af25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610264565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610b9f908490610e01565b505050565b60048054604080518082018252690878678326eac90000008082526000602083018190529251630b4c7e4d60e01b815292946001600160a01b0390941693630b4c7e4d939192610bf8929091879101611325565b60206040518083038185885af1158015610c16573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610c3b9190611340565b600480546040516370a0823160e01b815230928101929092529192506001600160a01b0390911690635b36389c9082906370a0823190602401602060405180830381865afa158015610c91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb59190611340565b60405180604001604052806000815260200160008152506040518363ffffffff1660e01b8152600401610ce99291906114cb565b600060405180830381600087803b158015610d0357600080fd5b505af1158015610a5c573d6000803e3d6000fd5b600480546040516370a0823160e01b815230928101929092526001600160a01b031690635b36389c9060089083906370a0823190602401602060405180830381865afa158015610d6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8f9190611340565b610d9991906114df565b60405180604001604052806000815260200160008152506040518363ffffffff1660e01b8152600401610dcd9291906114cb565b600060405180830381600087803b158015610de757600080fd5b505af1158015610dfb573d6000803e3d6000fd5b50505050565b6000610e56826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610ed39092919063ffffffff16565b805190915015610b9f5780806020019051810190610e749190611490565b610b9f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610264565b6060610ee28484600085610eec565b90505b9392505050565b606082471015610f4d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610264565b843b610f9b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610264565b600080866001600160a01b03168587604051610fb79190611501565b60006040518083038185875af1925050503d8060008114610ff4576040519150601f19603f3d011682016040523d82523d6000602084013e610ff9565b606091505b5091509150611009828286611014565b979650505050505050565b60608315611023575081610ee5565b8251156110335782518084602001fd5b8160405162461bcd60e51b8152600401610264919061151d565b634e487b7160e01b600052601160045260246000fd5b6000600182016110755761107561104d565b5060010190565b80356001600160a01b038116811461109357600080fd5b919050565b6000602082840312156110aa57600080fd5b610ee58261107c565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156110f2576110f26110b3565b604052919050565b600067ffffffffffffffff821115611114576111146110b3565b5060051b60200190565b600082601f83011261112f57600080fd5b8135602061114461113f836110fa565b6110c9565b82815260059290921b8401810191818101908684111561116357600080fd5b8286015b8481101561117e5780358352918301918301611167565b509695505050505050565b600082601f83011261119a57600080fd5b813567ffffffffffffffff8111156111b4576111b46110b3565b6111c7601f8201601f19166020016110c9565b8181528460208386010111156111dc57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561120f57600080fd5b843567ffffffffffffffff8082111561122757600080fd5b818701915087601f83011261123b57600080fd5b8135602061124b61113f836110fa565b82815260059290921b8401810191818101908b84111561126a57600080fd5b948201945b8386101561128f576112808661107c565b8252948201949082019061126f565b985050880135925050808211156112a557600080fd5b6112b18883890161111e565b945060408701359150808211156112c757600080fd5b6112d38883890161111e565b935060608701359150808211156112e957600080fd5b506112f687828801611189565b91505092959194509250565b8060005b6002811015610dfb578151845260209384019390910190600101611306565b606081016113338285611302565b8260408301529392505050565b60006020828403121561135257600080fd5b5051919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60005b838110156113bf5781810151838201526020016113a7565b50506000910152565b600081518084526113e08160208601602086016113a4565b601f01601f19169290920160200192915050565b6001600160a01b0385811682526080602080840182905286519184018290526000928782019290919060a0860190855b81811015611442578551851683529483019491830191600101611424565b5050858103604087015287518082529082019350915080870160005b8381101561147a5781518552938201939082019060010161145e565b50505050828103606084015261100981856113c8565b6000602082840312156114a257600080fd5b81518015158114610ee557600080fd5b818103818111156114c5576114c561104d565b92915050565b82815260608101610ee56020830184611302565b6000826114fc57634e487b7160e01b600052601260045260246000fd5b500490565b600082516115138184602087016113a4565b9190910192915050565b602081526000610ee560208301846113c856fea264697066735822122078785a2f78631fe645e8db8ad363b227d47f2c4de3d9223e3c218119598b07a864736f6c63430008100033

def storage:
  owner is addr at storage 0
  stor1 is uint256 at storage 1
  stor2 is addr at storage 2
  stor3 is addr at storage 3
  stor4 is addr at storage 4
  stor5 is addr at storage 5

def owner(): # not payable
  return owner

#
#  Regular functions
#

def renounceOwnership(): # not payable
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  log OwnershipTransferred(
        address previousOwner=owner,
        address newOwner=0)
  owner = 0

def transferOwnership(address _newOwner): # not payable
  require calldata.size - 4 >=ΓÇ▓ 32
  require _newOwner == _newOwner
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  if not _newOwner:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Ownable: new owner is the zero address'
  log OwnershipTransferred(
        address previousOwner=owner,
        address newOwner=_newOwner)
  owner = _newOwner

def unknown75aa3cd1(uint256 _param1): # not payable
  require calldata.size - 4 >=ΓÇ▓ 32
  require _param1 == addr(_param1)
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  require ext_code.size(addr(_param1))
  call addr(_param1).deposit() with:
     value eth.balance(this.address) wei
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def start(): # not payable
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  mem[128] = stor2
  mem[160] = 1
  idx = 0
  s = 420
  t = 128
  while idx < 1:
      mem[s] = mem[t + 12 len 20]
      idx = idx + 1
      s = s + 32
      t = t + 32
      continue
  require ext_code.size(stor5)
  call stor5.0x5c38449e with:
       gas gas_remaining wei
      args addr(this.address), 128, 192, 256, 1, mem[420], 1, 80000 * 10^18, 0
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  return 0

def withdraw(address _recipient): # not payable
  require calldata.size - 4 >=ΓÇ▓ 32
  require _recipient == _recipient
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  mem[100] = this.address
  static call _recipient.balanceOf(address tokenOwner) with:
          gas gas_remaining wei
         args this.address
  mem[96] = ext_call.return_data[0]
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >=ΓÇ▓ 32
  mem[ceil32(return_data.size) + 132] = caller
  mem[ceil32(return_data.size) + 164] = ext_call.return_data[0]
  mem[ceil32(return_data.size) + 96] = 68
  mem[ceil32(return_data.size) + 132 len 28] = Mask(224, 32, caller) >> 32
  mem[ceil32(return_data.size) + 128 len 4] = transfer(address to, uint256 tokens)
  mem[ceil32(return_data.size) + 196] = 32
  mem[ceil32(return_data.size) + 228] = 'SafeERC20: low-level call failed'
  if eth.balance(this.address) < 0:
      revert with 0, 'Address: insufficient balance for call'
  if not ext_code.size(_recipient):
      revert with 0, 'Address: call to non-contract'
  mem[ceil32(return_data.size) + 260 len 96] = transfer(address to, uint256 tokens), caller, ext_call.return_data[0], 0
  mem[ceil32(return_data.size) + 328] = 0
  call _recipient with:
     funct Mask(32, 224, transfer(address to, uint256 tokens), caller, ext_call.return_data >> 224
       gas gas_remaining wei
      args (Mask(512, -288, transfer(address to, uint256 tokens), caller, ext_call.return_data << 288)
  if not return_data.size:
      if not ext_call.success:
          if ext_call.return_data[0]:
              revert with memory
                from 128
                 len ext_call.return_data[0]
          revert with 0, 'SafeERC20: low-level call failed'
      if ext_call.return_data[0]:
          require ext_call.return_data >=ΓÇ▓ 32
          require uint32(this.address), mem[132 len 28] == bool(uint32(this.address), mem[132 len 28])
          if not uint32(this.address), mem[132 len 28]:
              revert with 0, 'SafeERC20: ERC20 operation did not succeed'
  else:
      mem[ceil32(return_data.size) + 292 len return_data.size] = ext_call.return_data[0 len return_data.size]
      if not ext_call.success:
          if return_data.size:
              revert with ext_call.return_data[0 len return_data.size]
          revert with 0, 'SafeERC20: low-level call failed'
      if return_data.size:
          require return_data.size >=ΓÇ▓ 32
          require mem[ceil32(return_data.size) + 292] == bool(mem[ceil32(return_data.size) + 292])
          if not mem[ceil32(return_data.size) + 292]:
              revert with 0, 'SafeERC20: ERC20 operation did not succeed'
  log 0x9207361c: ext_call.return_data

def unknownf04f2707(): # not payable
  require calldata.size - 4 >=ΓÇ▓ 128
  require cd <= 18446744073709551615
  require cd <ΓÇ▓ calldata.size
  if ('cd', 4).length > 18446744073709551615:
      revert with 0, 65
  if ceil32(32 * ('cd', 4).length) + 97 < 96 or ceil32(32 * ('cd', 4).length) + 97 > 18446744073709551615:
      revert with 0, 65
  require cd * ('cd', 4).length) + 36 <= calldata.size
  s = 128
  idx = cd[4] + 36
  while idx < cd * ('cd', 4).length) + 36:
      require cd[idx] == addr(cd[idx])
      mem[s] = cd[idx]
      s = s + 32
      idx = idx + 32
      continue
  require cd <= 18446744073709551615
  require cd <ΓÇ▓ calldata.size
  if ('cd', 36).length > 18446744073709551615:
      revert with 0, 65
  if ceil32(32 * ('cd', 36).length) + 98 < 97 or ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + 98 > 18446744073709551615:
      revert with 0, 65
  mem[ceil32(32 * ('cd', 4).length) + 97] = ('cd', 36).length
  require cd * ('cd', 36).length) + 36 <= calldata.size
  idx = cd[36] + 36
  s = ceil32(32 * ('cd', 4).length) + 129
  while idx < cd * ('cd', 36).length) + 36:
      mem[s] = cd[idx]
      idx = idx + 32
      s = s + 32
      continue
  require cd <= 18446744073709551615
  require cd <ΓÇ▓ calldata.size
  if ('cd', 68).length > 18446744073709551615:
      revert with 0, 65
  if ceil32(32 * ('cd', 68).length) + 99 < 98 or ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + ceil32(32 * ('cd', 68).length) + 99 > 18446744073709551615:
      revert with 0, 65
  mem[ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + 98] = ('cd', 68).length
  require cd * ('cd', 68).length) + 36 <= calldata.size
  idx = cd[68] + 36
  s = ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + 130
  while idx < cd * ('cd', 68).length) + 36:
      mem[s] = cd[idx]
      idx = idx + 32
      s = s + 32
      continue
  require cd <= 18446744073709551615
  require cd <ΓÇ▓ calldata.size
  if ('cd', 100).length > 18446744073709551615:
      revert with 0, 65
  if ceil32(ceil32(('cd', 100).length)) + 100 < 99 or ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + ceil32(32 * ('cd', 68).length) + ceil32(ceil32(('cd', 100).length)) + 100 > 18446744073709551615:
      revert with 0, 65
  mem[ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + ceil32(32 * ('cd', 68).length) + 99] = ('cd', 100).length
  require cd('cd', 100).length + 36 <= calldata.size
  mem[ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + ceil32(32 * ('cd', 68).length) + 131 len ('cd', 100).length] = call.data[cd('cd', 100).length]
  require ext_code.size(stor2)
  call stor2.withdraw(uint256 withdrawCount) with:
       gas gas_remaining wei
      args 80000 * 10^18
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  mem[ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + ceil32(32 * ('cd', 68).length) + ceil32(ceil32(('cd', 100).length)) + 100] = 40000 * 10^18
  mem[ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + ceil32(32 * ('cd', 68).length) + ceil32(ceil32(('cd', 100).length)) + 132] = 0
  call stor4.add_liquidity(uint256 param1, uint256 param2) with:
     value 40000 * 10^18 wei
       gas gas_remaining wei
      args 40000 * 10^18, 0 >> 256, 0
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >=ΓÇ▓ 32
  static call stor4.balanceOf(address tokenOwner) with:
          gas gas_remaining wei
         args this.address
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >=ΓÇ▓ 32
  require ext_code.size(stor4)
  call stor4.remove_liquidity(uint256 param1, uint256 param2) with:
       gas gas_remaining wei
      args ext_call.return_data[0], 0
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  static call stor4.balanceOf(address tokenOwner) with:
          gas gas_remaining wei
         args this.address
  require return_data.size >=ΓÇ▓ 32
  require ext_code.size(stor4)
  call stor4.remove_liquidity(uint256 param1, uint256 param2) with:
       gas gas_remaining wei
      args Mask(253, 3, ext_call.return_data[0]), 0
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  static call stor3.balanceOf(address tokenOwner) with:
          gas gas_remaining wei
         args this.address
  require return_data.size >=ΓÇ▓ 32
  call stor3.approve(address spender, uint256 tokens) with:
       gas gas_remaining wei
      args stor4, ext_call.return_data[0]
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >=ΓÇ▓ 32
  require ext_call.return_data == bool(ext_call.return_data[0])
  static call stor3.balanceOf(address tokenOwner) with:
          gas gas_remaining wei
         args this.address
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >=ΓÇ▓ 32
  static call stor3.balanceOf(address tokenOwner) with:
          gas gas_remaining wei
         args this.address
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >=ΓÇ▓ 32
  if ext_call.return_data > ext_call.return_data[0]:
      revert with 0, 17
  require ext_code.size(stor4)
  call stor4.exchange(int128 param1, int128 param2, uint256 param3, uint256 param4) with:
       gas gas_remaining wei
      args 1, 0, ext_call.return_data[0], ext_call.return_data[0] - 1000 * 10^18
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  if eth.balance(this.address) - 10^18 > eth.balance(this.address):
      revert with 0, 17
  require ext_code.size(stor2)
  call stor2.deposit() with:
     value eth.balance(this.address) - 10^18 wei
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  if not ('cd', 36).length:
      revert with 0, 50
  call stor2.transfer(address to, uint256 tokens) with:
       gas gas_remaining wei
      args stor5, mem[ceil32(32 * ('cd', 4).length) + 129]
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >=ΓÇ▓ 32
  require ext_call.return_data == bool(ext_call.return_data[0])
  static call stor2.balanceOf(address tokenOwner) with:
          gas gas_remaining wei
         args this.address
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >=ΓÇ▓ 32
  call stor2.transfer(address to, uint256 tokens) with:
       gas gas_remaining wei
      args 0x9420f8821ab4609ad9fa514f8d2f5344c3c0a6ab, ext_call.return_data[0]
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >=ΓÇ▓ 32
  require ext_call.return_data == bool(ext_call.return_data[0])

def _fallback() payable: # default function
  if calldata.size < 4:
      require not calldata.size
      if not caller - stor4:
          if not -stor1:
              call stor4.add_liquidity(uint256 param1, uint256 param2) with:
                 value 40000 * 10^18 wei
                   gas gas_remaining wei
                  args 40000 * 10^18, 0 >> 256, 0
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >=ΓÇ▓ 32
              if not stor1 + 1:
                  revert with 0, 17
              stor1++
  else:
      if owner() > uint32(call.func_hash) >> 224:
          if uint32(call.func_hash) >> 224 != withdraw(address recipient):
              if renounceOwnership() == uint32(call.func_hash) >> 224:
                  require not call.value
                  if owner != caller:
                      revert with 0, 'Ownable: caller is not the owner'
                  log OwnershipTransferred(
                        address previousOwner=owner,
                        address newOwner=0)
                  owner = 0
              else:
                  require 1974090961 == uint32(call.func_hash) >> 224
                  require not call.value
                  require calldata.size - 4 >=ΓÇ▓ 32
                  require cd == addr(cd)
                  if owner != caller:
                      revert with 0, 'Ownable: caller is not the owner'
                  require ext_code.size(addr(cd))
                  call addr(cd).deposit() with:
                     value eth.balance(this.address) wei
                       gas gas_remaining wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
          else:
              require not call.value
              require calldata.size - 4 >=ΓÇ▓ 32
              require cd == addr(cd)
              if owner != caller:
                  revert with 0, 'Ownable: caller is not the owner'
              mem[132] = this.address
              static call addr(cd).balanceOf(address tokenOwner) with:
                      gas gas_remaining wei
                     args this.address
              mem[128] = ext_call.return_data[0]
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >=ΓÇ▓ 32
              mem[ceil32(return_data.size) + 164] = caller
              mem[ceil32(return_data.size) + 196] = ext_call.return_data[0]
              mem[ceil32(return_data.size) + 128] = 68
              mem[ceil32(return_data.size) + 164 len 28] = Mask(224, 32, caller) >> 32
              mem[ceil32(return_data.size) + 160 len 4] = transfer(address to, uint256 tokens)
              mem[ceil32(return_data.size) + 228] = 32
              mem[ceil32(return_data.size) + 260] = 'SafeERC20: low-level call failed'
              if eth.balance(this.address) < 0:
                  revert with 0, 'Address: insufficient balance for call'
              if not ext_code.size(addr(cd)):
                  revert with 0, 'Address: call to non-contract'
              mem[ceil32(return_data.size) + 292 len 96] = transfer(address to, uint256 tokens), caller, ext_call.return_data[0], 0
              mem[ceil32(return_data.size) + 360] = 0
              call addr(cd) with:
                 funct Mask(32, 224, transfer(address to, uint256 tokens), caller, ext_call.return_data >> 224
                   gas gas_remaining wei
                  args (Mask(512, -288, transfer(address to, uint256 tokens), caller, ext_call.return_data << 288)
              if not return_data.size:
                  if not ext_call.success:
                      if mem[96]:
                          revert with memory
                            from 128
                             len mem[96]
                      revert with 0, 'SafeERC20: low-level call failed'
                  if mem[96]:
                      require mem[96] >=ΓÇ▓ 32
                      require ext_call.return_data == bool(ext_call.return_data[0])
                      if not ext_call.return_data[0]:
                          revert with 0, 'SafeERC20: ERC20 operation did not succeed'
              else:
                  mem[ceil32(return_data.size) + 324 len return_data.size] = ext_call.return_data[0 len return_data.size]
                  if not ext_call.success:
                      if return_data.size:
                          revert with ext_call.return_data[0 len return_data.size]
                      revert with 0, 'SafeERC20: low-level call failed'
                  if return_data.size:
                      require return_data.size >=ΓÇ▓ 32
                      require mem[ceil32(return_data.size) + 324] == bool(mem[ceil32(return_data.size) + 324])
                      if not mem[ceil32(return_data.size) + 324]:
                          revert with 0, 'SafeERC20: ERC20 operation did not succeed'
              log 0x9207361c: ext_call.return_data
      else:
          if owner() == uint32(call.func_hash) >> 224:
              require not call.value
              return owner
          if start() == uint32(call.func_hash) >> 224:
              require not call.value
              if owner != caller:
                  revert with 0, 'Ownable: caller is not the owner'
              mem[160] = stor2
              mem[192] = 1
              idx = 0
              s = 452
              t = 160
              while idx < 1:
                  mem[s] = mem[t + 12 len 20]
                  idx = idx + 1
                  s = s + 32
                  t = t + 32
                  continue
              require ext_code.size(stor5)
              call stor5.0x5c38449e with:
                   gas gas_remaining wei
                  args addr(this.address), 128, 192, 256, 1, mem[452], 1, 80000 * 10^18, 0
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              return 0
          if uint32(call.func_hash) >> 224 != 4031719175:
              require transferOwnership(address newOwner) == uint32(call.func_hash) >> 224
              require not call.value
              require calldata.size - 4 >=ΓÇ▓ 32
              require cd == addr(cd)
              if owner != caller:
                  revert with 0, 'Ownable: caller is not the owner'
              if not addr(cd):
                  revert with 0, 'Ownable: new owner is the zero address'
              log OwnershipTransferred(
                    address previousOwner=owner,
                    address newOwner=addr(cd
              owner = addr(cd)
          else:
              require not call.value
              require calldata.size - 4 >=ΓÇ▓ 128
              require cd <= 18446744073709551615
              require cd <ΓÇ▓ calldata.size
              if ('cd', 4).length > 18446744073709551615:
                  revert with 0, 65
              if ceil32(32 * ('cd', 4).length) + 129 < 128 or ceil32(32 * ('cd', 4).length) + 129 > 18446744073709551615:
                  revert with 0, 65
              require cd * ('cd', 4).length) + 36 <= calldata.size
              s = 160
              idx = cd[4] + 36
              while idx < cd * ('cd', 4).length) + 36:
                  require cd[idx] == addr(cd[idx])
                  mem[s] = cd[idx]
                  s = s + 32
                  idx = idx + 32
                  continue
              require cd <= 18446744073709551615
              require cd <ΓÇ▓ calldata.size
              if ('cd', 36).length > 18446744073709551615:
                  revert with 0, 65
              if ceil32(32 * ('cd', 36).length) + 130 < 129 or ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + 130 > 18446744073709551615:
                  revert with 0, 65
              mem[ceil32(32 * ('cd', 4).length) + 129] = ('cd', 36).length
              require cd * ('cd', 36).length) + 36 <= calldata.size
              idx = cd[36] + 36
              s = ceil32(32 * ('cd', 4).length) + 161
              while idx < cd * ('cd', 36).length) + 36:
                  mem[s] = cd[idx]
                  idx = idx + 32
                  s = s + 32
                  continue
              require cd <= 18446744073709551615
              require cd <ΓÇ▓ calldata.size
              if ('cd', 68).length > 18446744073709551615:
                  revert with 0, 65
              if ceil32(32 * ('cd', 68).length) + 131 < 130 or ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + ceil32(32 * ('cd', 68).length) + 131 > 18446744073709551615:
                  revert with 0, 65
              mem[ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + 130] = ('cd', 68).length
              require cd * ('cd', 68).length) + 36 <= calldata.size
              idx = cd[68] + 36
              s = ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + 162
              while idx < cd * ('cd', 68).length) + 36:
                  mem[s] = cd[idx]
                  idx = idx + 32
                  s = s + 32
                  continue
              require cd <= 18446744073709551615
              require cd <ΓÇ▓ calldata.size
              if ('cd', 100).length > 18446744073709551615:
                  revert with 0, 65
              if ceil32(ceil32(('cd', 100).length)) + 132 < 131 or ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + ceil32(32 * ('cd', 68).length) + ceil32(ceil32(('cd', 100).length)) + 132 > 18446744073709551615:
                  revert with 0, 65
              mem[ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + ceil32(32 * ('cd', 68).length) + 131] = ('cd', 100).length
              require cd('cd', 100).length + 36 <= calldata.size
              mem[ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + ceil32(32 * ('cd', 68).length) + 163 len ('cd', 100).length] = call.data[cd('cd', 100).length]
              require ext_code.size(stor2)
              call stor2.withdraw(uint256 withdrawCount) with:
                   gas gas_remaining wei
                  args 80000 * 10^18
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              mem[ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + ceil32(32 * ('cd', 68).length) + ceil32(ceil32(('cd', 100).length)) + 132] = 40000 * 10^18
              mem[ceil32(32 * ('cd', 4).length) + ceil32(32 * ('cd', 36).length) + ceil32(32 * ('cd', 68).length) + ceil32(ceil32(('cd', 100).length)) + 164] = 0
              call stor4.add_liquidity(uint256 param1, uint256 param2) with:
                 value 40000 * 10^18 wei
                   gas gas_remaining wei
                  args 40000 * 10^18, 0 >> 256, 0
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >=ΓÇ▓ 32
              static call stor4.balanceOf(address tokenOwner) with:
                      gas gas_remaining wei
                     args this.address
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >=ΓÇ▓ 32
              require ext_code.size(stor4)
              call stor4.remove_liquidity(uint256 param1, uint256 param2) with:
                   gas gas_remaining wei
                  args ext_call.return_data[0], 0
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              static call stor4.balanceOf(address tokenOwner) with:
                      gas gas_remaining wei
                     args this.address
              require return_data.size >=ΓÇ▓ 32
              require ext_code.size(stor4)
              call stor4.remove_liquidity(uint256 param1, uint256 param2) with:
                   gas gas_remaining wei
                  args Mask(253, 3, ext_call.return_data[0]), 0
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              static call stor3.balanceOf(address tokenOwner) with:
                      gas gas_remaining wei
                     args this.address
              require return_data.size >=ΓÇ▓ 32
              call stor3.approve(address spender, uint256 tokens) with:
                   gas gas_remaining wei
                  args stor4, ext_call.return_data[0]
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >=ΓÇ▓ 32
              require ext_call.return_data == bool(ext_call.return_data[0])
              static call stor3.balanceOf(address tokenOwner) with:
                      gas gas_remaining wei
                     args this.address
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >=ΓÇ▓ 32
              static call stor3.balanceOf(address tokenOwner) with:
                      gas gas_remaining wei
                     args this.address
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >=ΓÇ▓ 32
              if ext_call.return_data > ext_call.return_data[0]:
                  revert with 0, 17
              require ext_code.size(stor4)
              call stor4.exchange(int128 param1, int128 param2, uint256 param3, uint256 param4) with:
                   gas gas_remaining wei
                  args 1, 0, ext_call.return_data[0], ext_call.return_data[0] - 1000 * 10^18
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              if eth.balance(this.address) - 10^18 > eth.balance(this.address):
                  revert with 0, 17
              require ext_code.size(stor2)
              call stor2.deposit() with:
                 value eth.balance(this.address) - 10^18 wei
                   gas gas_remaining wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              if not ('cd', 36).length:
                  revert with 0, 50
              call stor2.transfer(address to, uint256 tokens) with:
                   gas gas_remaining wei
                  args stor5, mem[ceil32(32 * ('cd', 4).length) + 161]
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >=ΓÇ▓ 32
              require ext_call.return_data == bool(ext_call.return_data[0])
              static call stor2.balanceOf(address tokenOwner) with:
                      gas gas_remaining wei
                     args this.address
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >=ΓÇ▓ 32
              call stor2.transfer(address to, uint256 tokens) with:
                   gas gas_remaining wei
                  args 0x9420f8821ab4609ad9fa514f8d2f5344c3c0a6ab, ext_call.return_data[0]
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >=ΓÇ▓ 32
              require ext_call.return_data == bool(ext_call.return_data[0])


